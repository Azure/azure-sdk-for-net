// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Compute.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Encryption settings for disk or snapshot
    /// </summary>
    public partial class EncryptionSettingsCollection
    {
        /// <summary>
        /// Initializes a new instance of the EncryptionSettingsCollection
        /// class.
        /// </summary>
        public EncryptionSettingsCollection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EncryptionSettingsCollection
        /// class.
        /// </summary>
        /// <param name="enabled">Set this flag to true and provide
        /// DiskEncryptionKey and optional KeyEncryptionKey to enable
        /// encryption. Set this flag to false and remove DiskEncryptionKey and
        /// KeyEncryptionKey to disable encryption. If EncryptionSettings is
        /// null in the request object, the existing settings remain
        /// unchanged.</param>
        /// <param name="encryptionSettings">A collection of encryption
        /// settings, one for each disk volume.</param>
        /// <param name="encryptionSettingsVersion">Describes what type of
        /// encryption is used for the disks. Once this field is set, it cannot
        /// be overwritten. '1.0' corresponds to Azure Disk Encryption with AAD
        /// app.'1.1' corresponds to Azure Disk Encryption.</param>
        public EncryptionSettingsCollection(bool enabled, IList<EncryptionSettingsElement> encryptionSettings = default(IList<EncryptionSettingsElement>), string encryptionSettingsVersion = default(string))
        {
            Enabled = enabled;
            EncryptionSettings = encryptionSettings;
            EncryptionSettingsVersion = encryptionSettingsVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets set this flag to true and provide DiskEncryptionKey
        /// and optional KeyEncryptionKey to enable encryption. Set this flag
        /// to false and remove DiskEncryptionKey and KeyEncryptionKey to
        /// disable encryption. If EncryptionSettings is null in the request
        /// object, the existing settings remain unchanged.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or sets a collection of encryption settings, one for each disk
        /// volume.
        /// </summary>
        [JsonProperty(PropertyName = "encryptionSettings")]
        public IList<EncryptionSettingsElement> EncryptionSettings { get; set; }

        /// <summary>
        /// Gets or sets describes what type of encryption is used for the
        /// disks. Once this field is set, it cannot be overwritten. '1.0'
        /// corresponds to Azure Disk Encryption with AAD app.'1.1' corresponds
        /// to Azure Disk Encryption.
        /// </summary>
        [JsonProperty(PropertyName = "encryptionSettingsVersion")]
        public string EncryptionSettingsVersion { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EncryptionSettings != null)
            {
                foreach (var element in EncryptionSettings)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
