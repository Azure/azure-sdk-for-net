// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Linq;

namespace Azure.Ai.Speech.Transcription.Models
{
    /// <summary> Model factory for models. </summary>
    public static partial class AiSpeechTranscriptionModelFactory
    {
        /// <summary> Initializes a new instance of <see cref="Models.TranscriptionResult"/>. </summary>
        /// <param name="durationMilliseconds"> The duration of the audio in milliseconds. </param>
        /// <param name="combinedPhrases"> The full transcript for each channel. </param>
        /// <param name="phrases"> The transcription results segmented into phrases. </param>
        /// <returns> A new <see cref="Models.TranscriptionResult"/> instance for mocking. </returns>
        public static TranscriptionResult TranscriptionResult(int durationMilliseconds = default, IEnumerable<ChannelCombinedPhrases> combinedPhrases = null, IEnumerable<TranscribedPhrase> phrases = null)
        {
            combinedPhrases ??= new List<ChannelCombinedPhrases>();
            phrases ??= new List<TranscribedPhrase>();

            return new TranscriptionResult(durationMilliseconds, combinedPhrases?.ToList(), phrases?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.ChannelCombinedPhrases"/>. </summary>
        /// <param name="channel"> The 0-based channel index. Only present if channel separation is enabled. </param>
        /// <param name="text"> The complete transcribed text for the channel. </param>
        /// <returns> A new <see cref="Models.ChannelCombinedPhrases"/> instance for mocking. </returns>
        public static ChannelCombinedPhrases ChannelCombinedPhrases(int? channel = null, string text = null)
        {
            return new ChannelCombinedPhrases(channel, text, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TranscribedPhrase"/>. </summary>
        /// <param name="channel"> The 0-based channel index. Only present if channel separation is enabled. </param>
        /// <param name="speaker"> A unique integer number that is assigned to each speaker detected in the audio without particular order. Only present if speaker diarization is enabled. </param>
        /// <param name="offsetMilliseconds"> The start offset of the phrase in milliseconds. </param>
        /// <param name="durationMilliseconds"> The duration of the phrase in milliseconds. </param>
        /// <param name="text"> The transcribed text of the phrase. </param>
        /// <param name="words"> The words that make up the phrase. Only present if word-level timestamps are enabled. </param>
        /// <param name="locale"> The locale of the phrase. </param>
        /// <param name="confidence"> The confidence value for the phrase. </param>
        /// <returns> A new <see cref="Models.TranscribedPhrase"/> instance for mocking. </returns>
        public static TranscribedPhrase TranscribedPhrase(int? channel = null, int? speaker = null, int offsetMilliseconds = default, int durationMilliseconds = default, string text = null, IEnumerable<TranscribedWord> words = null, string locale = null, float confidence = default)
        {
            words ??= new List<TranscribedWord>();

            return new TranscribedPhrase(
                channel,
                speaker,
                offsetMilliseconds,
                durationMilliseconds,
                text,
                words?.ToList(),
                locale,
                confidence,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TranscribedWord"/>. </summary>
        /// <param name="text"> The recognized word, including punctuation. </param>
        /// <param name="offsetMilliseconds"> The start offset of the word in milliseconds. </param>
        /// <param name="durationMilliseconds"> The duration of the word in milliseconds. </param>
        /// <returns> A new <see cref="Models.TranscribedWord"/> instance for mocking. </returns>
        public static TranscribedWord TranscribedWord(string text = null, int offsetMilliseconds = default, int durationMilliseconds = default)
        {
            return new TranscribedWord(text, offsetMilliseconds, durationMilliseconds, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TranscriptionOptions"/>. </summary>
        /// <param name="audioUrl"> The URL of the audio to be transcribed. The audio must be shorter than 2 hours in audio duration and smaller than 250 MB in size. If both Audio and AudioUrl are provided, Audio is used. </param>
        /// <param name="locales"> A list of possible locales for the transcription. If not specified, the locale of the speech in the audio is detected automatically from all supported locales. </param>
        /// <param name="models"> Maps some or all candidate locales to a model URI to be used for transcription. If no mapping is given, the default model for the locale is used. </param>
        /// <param name="profanityFilterMode"> Mode of profanity filtering. </param>
        /// <param name="diarizationOptions"> Mode of diarization. </param>
        /// <param name="activeChannels"> The 0-based indices of the channels to be transcribed separately. If not specified, multiple channels are merged and transcribed jointly. Only up to two channels are supported. </param>
        /// <param name="enhancedMode"> Enhanced mode properties. </param>
        /// <param name="phraseList"> Phrase list properties. </param>
        /// <returns> A new <see cref="Models.TranscriptionOptions"/> instance for mocking. </returns>
        public static TranscriptionOptions TranscriptionOptions(Uri audioUrl = null, IEnumerable<string> locales = null, IReadOnlyDictionary<string, Uri> models = null, ProfanityFilterMode? profanityFilterMode = null, TranscriptionDiarizationOptions diarizationOptions = null, IEnumerable<int> activeChannels = null, EnhancedModeProperties enhancedMode = null, PhraseListProperties phraseList = null)
        {
            locales ??= new List<string>();
            models ??= new Dictionary<string, Uri>();
            activeChannels ??= new List<int>();

            return new TranscriptionOptions(
                audioUrl,
                locales?.ToList(),
                models,
                profanityFilterMode,
                diarizationOptions,
                activeChannels?.ToList(),
                enhancedMode,
                phraseList,
                serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.TranscriptionDiarizationOptions"/>. </summary>
        /// <param name="enabled"> Gets or sets a value indicating whether speaker diarization is enabled. </param>
        /// <param name="maxSpeakers"> Gets or sets a hint for the maximum number of speakers for diarization. Must be greater than 1 and less than 36. </param>
        /// <returns> A new <see cref="Models.TranscriptionDiarizationOptions"/> instance for mocking. </returns>
        public static TranscriptionDiarizationOptions TranscriptionDiarizationOptions(bool? enabled = null, int? maxSpeakers = null)
        {
            return new TranscriptionDiarizationOptions(enabled, maxSpeakers, serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.EnhancedModeProperties"/>. </summary>
        /// <param name="enabled"> Enable enhanced mode for transcription. </param>
        /// <param name="task"> Task type for enhanced mode. </param>
        /// <param name="targetLanguage"> Target language for enhanced mode. </param>
        /// <param name="prompt"> A list of user prompts. </param>
        /// <returns> A new <see cref="Models.EnhancedModeProperties"/> instance for mocking. </returns>
        public static EnhancedModeProperties EnhancedModeProperties(bool? enabled = null, string task = null, string targetLanguage = null, IEnumerable<string> prompt = null)
        {
            prompt ??= new List<string>();

            return new EnhancedModeProperties(enabled, task, targetLanguage, prompt?.ToList(), serializedAdditionalRawData: null);
        }

        /// <summary> Initializes a new instance of <see cref="Models.PhraseListProperties"/>. </summary>
        /// <param name="phrases"> List of phrases for recognition. </param>
        /// <param name="biasingWeight"> Biasing weight for phrase list (1.0 to 20.0). </param>
        /// <returns> A new <see cref="Models.PhraseListProperties"/> instance for mocking. </returns>
        public static PhraseListProperties PhraseListProperties(IEnumerable<string> phrases = null, float? biasingWeight = null)
        {
            phrases ??= new List<string>();

            return new PhraseListProperties(phrases?.ToList(), biasingWeight, serializedAdditionalRawData: null);
        }
    }
}
