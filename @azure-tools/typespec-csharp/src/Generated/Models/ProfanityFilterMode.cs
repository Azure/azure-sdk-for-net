// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Ai.Speech.Transcription.Models
{
    /// <summary> Mode of profanity filtering. </summary>
    public readonly partial struct ProfanityFilterMode : IEquatable<ProfanityFilterMode>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="ProfanityFilterMode"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ProfanityFilterMode(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NoneValue = "None";
        private const string RemovedValue = "Removed";
        private const string TagsValue = "Tags";
        private const string MaskedValue = "Masked";

        /// <summary> Disable profanity filtering. </summary>
        public static ProfanityFilterMode None { get; } = new ProfanityFilterMode(NoneValue);
        /// <summary> Remove profanity. </summary>
        public static ProfanityFilterMode Removed { get; } = new ProfanityFilterMode(RemovedValue);
        /// <summary> Add "profanity" XML tags&lt;/Profanity&gt;. </summary>
        public static ProfanityFilterMode Tags { get; } = new ProfanityFilterMode(TagsValue);
        /// <summary> Mask the profanity with * except of the first letter, e.g., f***. </summary>
        public static ProfanityFilterMode Masked { get; } = new ProfanityFilterMode(MaskedValue);
        /// <summary> Determines if two <see cref="ProfanityFilterMode"/> values are the same. </summary>
        public static bool operator ==(ProfanityFilterMode left, ProfanityFilterMode right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ProfanityFilterMode"/> values are not the same. </summary>
        public static bool operator !=(ProfanityFilterMode left, ProfanityFilterMode right) => !left.Equals(right);
        /// <summary> Converts a <see cref="string"/> to a <see cref="ProfanityFilterMode"/>. </summary>
        public static implicit operator ProfanityFilterMode(string value) => new ProfanityFilterMode(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ProfanityFilterMode other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ProfanityFilterMode other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value != null ? StringComparer.InvariantCultureIgnoreCase.GetHashCode(_value) : 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
