// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;

namespace Azure.Ai.Speech.Transcription.Models
{
    /// <summary> Metadata for a transcription request. </summary>
    public partial class TranscriptionOptions
    {
        /// <summary>
        /// Keeps track of any properties unknown to the library.
        /// <para>
        /// To assign an object to the value of this property use <see cref="BinaryData.FromObjectAsJson{T}(T, System.Text.Json.JsonSerializerOptions?)"/>.
        /// </para>
        /// <para>
        /// To assign an already formatted json string to this property use <see cref="BinaryData.FromString(string)"/>.
        /// </para>
        /// <para>
        /// Examples:
        /// <list type="bullet">
        /// <item>
        /// <term>BinaryData.FromObjectAsJson("foo")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("\"foo\"")</term>
        /// <description>Creates a payload of "foo".</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromObjectAsJson(new { key = "value" })</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// <item>
        /// <term>BinaryData.FromString("{\"key\": \"value\"}")</term>
        /// <description>Creates a payload of { "key": "value" }.</description>
        /// </item>
        /// </list>
        /// </para>
        /// </summary>
        private IDictionary<string, BinaryData> _serializedAdditionalRawData;

        /// <summary> Initializes a new instance of <see cref="TranscriptionOptions"/>. </summary>
        internal TranscriptionOptions()
        {
            Locales = new ChangeTrackingList<string>();
            Models = new ChangeTrackingDictionary<string, Uri>();
            ActiveChannels = new ChangeTrackingList<int>();
        }

        /// <summary> Initializes a new instance of <see cref="TranscriptionOptions"/>. </summary>
        /// <param name="audioUrl"> The URL of the audio to be transcribed. The audio must be shorter than 2 hours in audio duration and smaller than 250 MB in size. If both Audio and AudioUrl are provided, Audio is used. </param>
        /// <param name="locales"> A list of possible locales for the transcription. If not specified, the locale of the speech in the audio is detected automatically from all supported locales. </param>
        /// <param name="models"> Maps some or all candidate locales to a model URI to be used for transcription. If no mapping is given, the default model for the locale is used. </param>
        /// <param name="profanityFilterMode"> Mode of profanity filtering. </param>
        /// <param name="diarizationOptions"> Mode of diarization. </param>
        /// <param name="activeChannels"> The 0-based indices of the channels to be transcribed separately. If not specified, multiple channels are merged and transcribed jointly. Only up to two channels are supported. </param>
        /// <param name="enhancedMode"> Enhanced mode properties. </param>
        /// <param name="phraseList"> Phrase list properties. </param>
        /// <param name="serializedAdditionalRawData"> Keeps track of any properties unknown to the library. </param>
        internal TranscriptionOptions(Uri audioUrl, IReadOnlyList<string> locales, IReadOnlyDictionary<string, Uri> models, ProfanityFilterMode? profanityFilterMode, TranscriptionDiarizationOptions diarizationOptions, IReadOnlyList<int> activeChannels, EnhancedModeProperties enhancedMode, PhraseListProperties phraseList, IDictionary<string, BinaryData> serializedAdditionalRawData)
        {
            AudioUrl = audioUrl;
            Locales = locales;
            Models = models;
            ProfanityFilterMode = profanityFilterMode;
            DiarizationOptions = diarizationOptions;
            ActiveChannels = activeChannels;
            EnhancedMode = enhancedMode;
            PhraseList = phraseList;
            _serializedAdditionalRawData = serializedAdditionalRawData;
        }

        /// <summary> The URL of the audio to be transcribed. The audio must be shorter than 2 hours in audio duration and smaller than 250 MB in size. If both Audio and AudioUrl are provided, Audio is used. </summary>
        public Uri AudioUrl { get; }
        /// <summary> A list of possible locales for the transcription. If not specified, the locale of the speech in the audio is detected automatically from all supported locales. </summary>
        public IReadOnlyList<string> Locales { get; }
        /// <summary> Maps some or all candidate locales to a model URI to be used for transcription. If no mapping is given, the default model for the locale is used. </summary>
        public IReadOnlyDictionary<string, Uri> Models { get; }
        /// <summary> Mode of profanity filtering. </summary>
        public ProfanityFilterMode? ProfanityFilterMode { get; }
        /// <summary> Mode of diarization. </summary>
        public TranscriptionDiarizationOptions DiarizationOptions { get; }
        /// <summary> The 0-based indices of the channels to be transcribed separately. If not specified, multiple channels are merged and transcribed jointly. Only up to two channels are supported. </summary>
        public IReadOnlyList<int> ActiveChannels { get; }
        /// <summary> Enhanced mode properties. </summary>
        public EnhancedModeProperties EnhancedMode { get; }
        /// <summary> Phrase list properties. </summary>
        public PhraseListProperties PhraseList { get; }
    }
}
