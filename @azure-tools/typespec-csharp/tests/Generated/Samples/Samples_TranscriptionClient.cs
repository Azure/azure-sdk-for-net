// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Ai.Speech.Transcription.Models;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.Ai.Speech.Transcription.Samples
{
    public partial class Samples_TranscriptionClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transcription_Transcribe_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = client.Transcribe(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transcription_Transcribe_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new object());
            Response response = await client.TranscribeAsync(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transcription_Transcribe_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            TranscribeRequest body = new TranscribeRequest();
            Response<TranscriptionResult> response = client.Transcribe(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transcription_Transcribe_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            TranscribeRequest body = new TranscribeRequest();
            Response<TranscriptionResult> response = await client.TranscribeAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transcription_Transcribe_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                definition = "<definition>",
                audio = File.OpenRead("<filePath>"),
            });
            Response response = client.Transcribe(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("channel").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("channel").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("speaker").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transcription_Transcribe_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            using RequestContent content = RequestContent.Create(new
            {
                definition = "<definition>",
                audio = File.OpenRead("<filePath>"),
            });
            Response response = await client.TranscribeAsync(content, "multipart/form-data");

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("channel").ToString());
            Console.WriteLine(result.GetProperty("combinedPhrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("channel").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("speaker").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("text").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("offsetMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("words")[0].GetProperty("durationMilliseconds").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("locale").ToString());
            Console.WriteLine(result.GetProperty("phrases")[0].GetProperty("confidence").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transcription_Transcribe_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            TranscribeRequest body = new TranscribeRequest
            {
                Definition = "<definition>",
                Audio = null,
            };
            Response<TranscriptionResult> response = client.Transcribe(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transcription_Transcribe_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            TranscribeRequest body = new TranscribeRequest
            {
                Definition = "<definition>",
                Audio = null,
            };
            Response<TranscriptionResult> response = await client.TranscribeAsync(body);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transcription_GetTranscriptionOptionsSchema_ShortVersion()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            Response response = client.GetTranscriptionOptionsSchema(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transcription_GetTranscriptionOptionsSchema_ShortVersion_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            Response response = await client.GetTranscriptionOptionsSchemaAsync(null, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transcription_GetTranscriptionOptionsSchema_ShortVersion_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            Response<TranscriptionOptions> response = client.GetTranscriptionOptionsSchema();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transcription_GetTranscriptionOptionsSchema_ShortVersion_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            Response<TranscriptionOptions> response = await client.GetTranscriptionOptionsSchemaAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transcription_GetTranscriptionOptionsSchema_AllParameters()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            Response response = client.GetTranscriptionOptionsSchema("<definition>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("audioUrl").ToString());
            Console.WriteLine(result.GetProperty("locales")[0].ToString());
            Console.WriteLine(result.GetProperty("models").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("enhancedMode").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("enhancedMode").GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("enhancedMode").GetProperty("targetLanguage").ToString());
            Console.WriteLine(result.GetProperty("enhancedMode").GetProperty("prompt")[0].ToString());
            Console.WriteLine(result.GetProperty("phraseList").GetProperty("phrases")[0].ToString());
            Console.WriteLine(result.GetProperty("phraseList").GetProperty("biasingWeight").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transcription_GetTranscriptionOptionsSchema_AllParameters_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            Response response = await client.GetTranscriptionOptionsSchemaAsync("<definition>", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("audioUrl").ToString());
            Console.WriteLine(result.GetProperty("locales")[0].ToString());
            Console.WriteLine(result.GetProperty("models").GetProperty("<key>").ToString());
            Console.WriteLine(result.GetProperty("profanityFilterMode").ToString());
            Console.WriteLine(result.GetProperty("diarization").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("diarization").GetProperty("maxSpeakers").ToString());
            Console.WriteLine(result.GetProperty("channels")[0].ToString());
            Console.WriteLine(result.GetProperty("enhancedMode").GetProperty("enabled").ToString());
            Console.WriteLine(result.GetProperty("enhancedMode").GetProperty("task").ToString());
            Console.WriteLine(result.GetProperty("enhancedMode").GetProperty("targetLanguage").ToString());
            Console.WriteLine(result.GetProperty("enhancedMode").GetProperty("prompt")[0].ToString());
            Console.WriteLine(result.GetProperty("phraseList").GetProperty("phrases")[0].ToString());
            Console.WriteLine(result.GetProperty("phraseList").GetProperty("biasingWeight").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Transcription_GetTranscriptionOptionsSchema_AllParameters_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            Response<TranscriptionOptions> response = client.GetTranscriptionOptionsSchema(definition: "<definition>");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Transcription_GetTranscriptionOptionsSchema_AllParameters_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            TranscriptionClient client = new TranscriptionClient(endpoint, credential);

            Response<TranscriptionOptions> response = await client.GetTranscriptionOptionsSchemaAsync(definition: "<definition>");
        }
    }
}
