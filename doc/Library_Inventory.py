#!/usr/bin/env python3

"""
Azure SDK for .NET Libraries Inventory Generator

This script generates an inventory of libraries in the Azure SDK for .NET repository,
categorizing them as data plane or management plane, and by the type of generator used
(Swagger or TypeSpec).
"""

import os
import re
import json
import glob
from pathlib import Path

def is_mgmt_library(path):
    """Check if a library is a management plane library."""
    if "Azure.ResourceManager" in path or ".Management." in path:
        return True
    return False

def identify_generator(path):
    """
    Identify if a library is generated using swagger or tsp.
    Returns: "Swagger", "TSP-New", "TSP-Old", or "Unknown"
    """
    # First check for direct TypeSpec indicators
    tsp_config_path = os.path.join(path, "src", "tspconfig.yaml")
    tsp_dir = os.path.join(path, "src", "tsp")
    tsp_files = glob.glob(os.path.join(path, "src", "*.tsp"))
    
    # Check for tsp-location.yaml files
    tsp_location_paths = []
    for root, dirs, files in os.walk(path):
        for file in files:
            if file.lower() == "tsp-location.yaml":
                tsp_location_paths.append(os.path.join(root, file))
    
    # If there's a tspLocation.yaml file and it contains emitterPackageJsonPath, it's using the new TypeSpec generator
    for tsp_location_path in tsp_location_paths:
        try:
            with open(tsp_location_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read().lower()
                if "emitterpackagejsonpath" in content:
                    return "TSP-New"
                else:
                    # Found tspLocation.yaml but no emitterPackageJsonPath, it's using the old TypeSpec generator
                    return "TSP-Old"
        except:
            pass
    
    if os.path.exists(tsp_config_path) or os.path.exists(tsp_dir) or tsp_files:
        return "TSP-Old"
    
    # Check autorest.md for TypeSpec indicators
    autorest_md_path = os.path.join(path, "src", "autorest.md")
    if os.path.exists(autorest_md_path):
        with open(autorest_md_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read().lower()
            
            # Check for TypeSpec markers
            tsp_markers = [
                "typespec",
                "emit-yaml-tags: tsp",
                "output-folder: $(typescript-sdks-folder)",
                "azure-typespec"
            ]
            
            for marker in tsp_markers:
                if marker in content:
                    return "TSP-Old"
            
            # If input-file points to a swagger spec, it's Swagger
            if "input-file:" in content and ("json" in content or "swagger" in content):
                return "Swagger"
            
            # If it's using autorest but not specifically TSP, assume Swagger
            return "Swagger"
    
    # No autorest.md but Generated folder exists, assume Swagger
    if os.path.exists(os.path.join(path, "src", "Generated")):
        return "Swagger"
        
    # Check if there's any file in src with "// <auto-generated/>" comment
    # which is typically found in AutoRest generated code
    src_dir = os.path.join(path, "src")
    if os.path.exists(src_dir):
        for root, dirs, files in os.walk(src_dir):
            for file in files:
                if file.endswith(".cs"):
                    file_path = os.path.join(root, file)
                    try:
                        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                            first_lines = "".join([f.readline() for _ in range(10)])
                            if "<auto-generated/>" in first_lines:
                                return "Swagger"  # Default to Swagger if we see auto-generated code
                    except:
                        pass
    
    return "Unknown"

def scan_libraries(sdk_root):
    """
    Scan all libraries in the sdk directory.
    
    Args:
        sdk_root (str): Path to the SDK root directory
        
    Returns:
        list: List of dictionaries with library information
    """
    libraries = []
    
    # Scan through all service directories
    for service_dir in os.listdir(sdk_root):
        service_path = os.path.join(sdk_root, service_dir)
        if not os.path.isdir(service_path):
            continue
        
        # Look for library directories
        for library_dir in os.listdir(service_path):
            library_path = os.path.join(service_path, library_dir)
            if not os.path.isdir(library_path):
                continue
                
            # Skip directories that don't look like libraries
            if library_dir in ["tests", "samples", "perf", "assets", "docs"]:
                continue
                
            # If it has a /src directory or a csproj file, it's likely a library
            if os.path.exists(os.path.join(library_path, "src")) or glob.glob(os.path.join(library_path, "*.csproj")):
                library_type = "Management" if is_mgmt_library(library_path) else "Data Plane"
                generator = identify_generator(library_path)
                
                libraries.append({
                    "service": service_dir,
                    "library": library_dir,
                    "path": os.path.relpath(library_path, os.path.dirname(sdk_root)),
                    "type": library_type,
                    "generator": generator
                })
    
    return libraries

def generate_markdown_report(libraries):
    """
    Generate a markdown report from the library inventory.
    
    Args:
        libraries (list): List of library dictionaries
        
    Returns:
        str: Markdown report content
    """
    # Group by type and generator
    mgmt_swagger = [lib for lib in libraries if lib["type"] == "Management" and lib["generator"] == "Swagger"]
    mgmt_tsp_old = [lib for lib in libraries if lib["type"] == "Management" and lib["generator"] == "TSP-Old"]
    mgmt_tsp_new = [lib for lib in libraries if lib["type"] == "Management" and lib["generator"] == "TSP-New"]
    data_swagger = [lib for lib in libraries if lib["type"] == "Data Plane" and lib["generator"] == "Swagger"]
    data_tsp_old = [lib for lib in libraries if lib["type"] == "Data Plane" and lib["generator"] == "TSP-Old"]
    data_tsp_new = [lib for lib in libraries if lib["type"] == "Data Plane" and lib["generator"] == "TSP-New"]
    unknown = [lib for lib in libraries if lib["generator"] == "Unknown"]
    
    # Combined TSP counts for backward compatibility
    mgmt_tsp = mgmt_tsp_old + mgmt_tsp_new
    data_tsp = data_tsp_old + data_tsp_new
    
    report = []
    report.append("# Azure SDK for .NET Libraries Inventory\n")
    
    report.append("## Summary\n")
    report.append(f"- Total libraries: {len(libraries)}")
    report.append(f"- Management Plane (Swagger): {len(mgmt_swagger)}")
    report.append(f"- Management Plane (TSP): {len(mgmt_tsp)} (New Generator: {len(mgmt_tsp_new)}, Old Generator: {len(mgmt_tsp_old)})")
    report.append(f"- Data Plane (Swagger): {len(data_swagger)}")
    report.append(f"- Data Plane (TSP): {len(data_tsp)} (New Generator: {len(data_tsp_new)}, Old Generator: {len(data_tsp_old)})")
    report.append(f"- Unknown generator: {len(unknown)}")
    report.append("\n")
    
    report.append("## Data Plane Libraries using TSP (New Generator)\n")
    report.append("TSP with new generator is detected by the presence of a tsp-location.yaml file with an emitterPackageJsonPath value.\n")
    report.append("| Service | Library | Path |")
    report.append("| ------- | ------- | ---- |")
    for lib in sorted(data_tsp_new, key=lambda x: (x["service"], x["library"])):
        report.append(f"| {lib['service']} | {lib['library']} | {lib['path']} |")
    report.append("\n")
    
    report.append("## Data Plane Libraries using TSP (Old Generator)\n")
    report.append("TSP with old generator is detected by the presence of a tsp-location.yaml file without an emitterPackageJsonPath value, tspconfig.yaml file, tsp directory, or *.tsp files.\n")
    report.append("| Service | Library | Path |")
    report.append("| ------- | ------- | ---- |")
    for lib in sorted(data_tsp_old, key=lambda x: (x["service"], x["library"])):
        report.append(f"| {lib['service']} | {lib['library']} | {lib['path']} |")
    report.append("\n")
    
    report.append("## Data Plane Libraries using Swagger\n")
    report.append("| Service | Library | Path |")
    report.append("| ------- | ------- | ---- |")
    for lib in sorted(data_swagger, key=lambda x: (x["service"], x["library"])):
        report.append(f"| {lib['service']} | {lib['library']} | {lib['path']} |")
    report.append("\n")
    
    report.append("## Management Plane Libraries using TSP (New Generator)\n")
    report.append("TSP with new generator is detected by the presence of a tsp-location.yaml file with an emitterPackageJsonPath value.\n")
    report.append("| Service | Library | Path |")
    report.append("| ------- | ------- | ---- |")
    for lib in sorted(mgmt_tsp_new, key=lambda x: (x["service"], x["library"])):
        report.append(f"| {lib['service']} | {lib['library']} | {lib['path']} |")
    report.append("\n")
    
    report.append("## Management Plane Libraries using TSP (Old Generator)\n")
    report.append("TSP with old generator is detected by the presence of a tsp-location.yaml file without an emitterPackageJsonPath value, tspconfig.yaml file, tsp directory, or *.tsp files.\n")
    report.append("| Service | Library | Path |")
    report.append("| ------- | ------- | ---- |")
    for lib in sorted(mgmt_tsp_old, key=lambda x: (x["service"], x["library"])):
        report.append(f"| {lib['service']} | {lib['library']} | {lib['path']} |")
    report.append("\n")
    
    report.append("## Management Plane Libraries using Swagger\n")
    report.append("| Service | Library | Path |")
    report.append("| ------- | ------- | ---- |")
    for lib in sorted(mgmt_swagger, key=lambda x: (x["service"], x["library"])):
        report.append(f"| {lib['service']} | {lib['library']} | {lib['path']} |")
    report.append("\n")
    
    report.append("## Libraries with Unknown Generator\n")
    report.append("| Service | Library | Path |")
    report.append("| ------- | ------- | ---- |")
    for lib in sorted(unknown, key=lambda x: (x["service"], x["library"])):
        report.append(f"| {lib['service']} | {lib['library']} | {lib['path']} |")
    
    return "\n".join(report)

if __name__ == "__main__":
    # Define the path to the SDK root directory
    SDK_ROOT = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "sdk")
    
    # Scan libraries
    libraries = scan_libraries(SDK_ROOT)
    
    # Print summary counts
    mgmt_swagger = sum(1 for lib in libraries if lib["type"] == "Management" and lib["generator"] == "Swagger")
    mgmt_tsp_old = sum(1 for lib in libraries if lib["type"] == "Management" and lib["generator"] == "TSP-Old")
    mgmt_tsp_new = sum(1 for lib in libraries if lib["type"] == "Management" and lib["generator"] == "TSP-New")
    mgmt_tsp = mgmt_tsp_old + mgmt_tsp_new
    
    data_swagger = sum(1 for lib in libraries if lib["type"] == "Data Plane" and lib["generator"] == "Swagger")
    data_tsp_old = sum(1 for lib in libraries if lib["type"] == "Data Plane" and lib["generator"] == "TSP-Old")
    data_tsp_new = sum(1 for lib in libraries if lib["type"] == "Data Plane" and lib["generator"] == "TSP-New")
    data_tsp = data_tsp_old + data_tsp_new
    
    unknown = sum(1 for lib in libraries if lib["generator"] == "Unknown")
    
    print(f"Total libraries found: {len(libraries)}")
    print(f"Management Plane (Swagger): {mgmt_swagger}")
    print(f"Management Plane (TSP): {mgmt_tsp} (New Generator: {mgmt_tsp_new}, Old Generator: {mgmt_tsp_old})")
    print(f"Data Plane (Swagger): {data_swagger}")
    print(f"Data Plane (TSP): {data_tsp} (New Generator: {data_tsp_new}, Old Generator: {data_tsp_old})")
    print(f"Unknown generator: {unknown}")
    
    # Generate the inventory markdown file
    markdown_report = generate_markdown_report(libraries)
    inventory_md_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "Library_Inventory.md")
    with open(inventory_md_path, 'w') as f:
        f.write(markdown_report)
    
    print(f"Library inventory markdown generated at: {inventory_md_path}")
    
    # Export JSON too for programmatic use
    json_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), "Library_Inventory.json")
    with open(json_path, 'w') as f:
        json.dump(libraries, f, indent=2)
    
    print(f"Library inventory JSON generated at: {json_path}")